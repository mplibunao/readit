name: deploy_staging

defaults:
  run:
    shell: bash

on:
  pull_request:
    branches:
      - main
      - master
    types:
      - closed
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
  IMAGE_TAG_PREFIX: ${{ secrets.CONTAINER_IMAGE_TAG_PREFIX }}
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_BUILDKIT: 1
  APP_NAME: readit
  PNPM_VERSION: 7.14.1
  NODE_VERSION: 18.12.0
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_REMOTE_ONLY: true

  API_HOST: ${{ secrets.API_HOST }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
  IS_PROD: ${{ secrets.IS_PROD }}
  LOGGING_LEVEL: ${{ secrets.LOGGING_LEVEL }}
  NODE_ENV: ${{ secrets.NODE_ENV }}
  PORT: ${{ secrets.PORT }}
  REDIS_URL: ${{ secrets.REDIS_URL }}

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: pnpm/action-setup@v2.2.4
        name: Install pnpm
        id: pnpm-install
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >>$GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run CI
        run: |
          pnpm ci

  docker_changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      # xt0rted/slash-command
      issues: 'write'
      pull-requests: 'write'
    # Set job outputs to values from filter step
    outputs:
      services: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            'api': 'apps/api/**'

  docker_staging_cd:
    name: docker_staging_cd
    needs: [docker_changes, ci]
    if: needs.docker_changes.outputs.services != '[]'
    runs-on: ubuntu-latest
    permissions:
      # wif
      contents: read
      id-token: write
    strategy:
      matrix:
        service: ${{ fromJSON(needs.docker_changes.outputs.services) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Auth GCP Service Account
        id: auth-gcp
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT }}'
          token_format: 'access_token'
          access_token_lifetime: '600s'

      - name: Build image tag
        run: |
          echo "IMAGE_TAG=${{ env.IMAGE_TAG_PREFIX }}/${{ env.APP_NAME }}-${{ matrix.service }}" >> $GITHUB_ENV
          echo "DOCKERFILE=./apps/${{ matrix.service }}/Dockerfile" >> $GITHUB_ENV

      - name: Setup buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
        #with:
        #buildkitd-flags: --debug

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.auth-gcp.outputs.access_token }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            name=${{ env.IMAGE_TAG }},enable=true
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value={{branch}}-{{sha}}

          flavor: |
            latest=auto
            prefix=
            suffix=

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          builder: ${{ steps.buildx.outputs.name }}
          target: production
          cache-from: type=registry,ref=${{ env.IMAGE_TAG }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_TAG }}:buildcache,mode=max
