name: terraform_ci_cd

defaults:
  run:
    shell: bash

on:
  pull_request:
    branches:
      - main
      - master
    paths:
      - 'tf/**/*.tf'
      - 'tf/**/*.tfvars'
      - 'tf/**/*.hcl'
    types:
      # Default
      - opened
      - synchronize
      - reopened
      # Merge
      - closed
  workflow_dispatch:

env:
  TF_VERSION: ~1.3.4

jobs:
  # Change detection
  changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      directories: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            'tf/applications/backend/0-folder':
              - 'tf/applications/backend/0-folder/*.tf'
              - 'tf/applications/backend/0-folder/*.tfvars'
              - 'tf/applications/backend/0-folder/*.hcl'
            'tf/applications/backend/prod':
              - 'tf/applications/backend/prod/*.tf'
              - 'tf/applications/backend/prod/*.tfvars'
              - 'tf/applications/backend/prod/*.hcl'

  terraform-ci-cd:
    needs: changes
    name: terraform
    runs-on: ubuntu-latest
    # Run one for each changed directory
    # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
    strategy:
      matrix:
        # Parse JSON array containing names of all filters matching any of changed files
        directory: ${{ fromJSON(needs.changes.outputs.directories) }}
    defaults:
      run:
        working-directory: ${{ matrix.directory }}
    permissions:
      # Changes the permissions of github token
      # Required for google-github-actions/auth but may set other permissions to none
      # For info on how to configure this, refer to: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
      # See https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token for the default permissions
      contents: 'read'
      id-token: 'write'
      # Writing comments
      issues: 'write'
      pull-requests: 'write'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Auth GCP Service Account
        id: auth-gcp
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT }}'
          export_environment_variables: true
          create_credentials_file: true
          token_format: 'access_token'
          access_token_lifetime: '1200s'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform validate
        id: validate
        run: terraform validate -no-color

      - uses: actions/cache@v2
        name: Cache tflint plugin dir
        with:
          path: ~/.tflint.d/plugins
          key: ${{ matrix.directory }}-tflint-${{ hashFiles('.tflint.hcl') }}

      - uses: terraform-linters/setup-tflint@v2
        name: Setup TFLint
        with:
          tflint_version: v0.42.2

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        id: tflint
        run: tflint -f compact

      - name: Terraform Plan
        id: plan
        if: github.event.pull_request.merged == false
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Comment Plan
        uses: actions/github-script@v6
        if: github.event.pull_request.merged == false
        env:
          PLAN: '${{ steps.plan.outputs.stdout }}'
          ERROR: ${{ steps.plan.outputs.stderr }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { PLAN, ERROR } = process.env
            const output = `#### Job: \`${{ github.workflow }}-${{ matrix.directory }}\`
            #### Terraform Format and Style ðŸ–Œ\`${{ steps.fm.outcome }}\`
            #### Terraform Validation ðŸ¤–\`${{ steps.validate.outcome }}\`
            #### Terraform Lint \`${{ steps.tflint.outcome }}\`
            #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`hcl\n
            ${PLAN}
            \`\`\`

            </details>

            <details><summary>Show Errors</summary>

            \`\`\`hcl\n
            ${ERROR}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
            })

      - name: Terraform Apply
        if: ${{ github.event.pull_request.merged == true }}
        run: terraform apply -auto-approve -input=false
        id: apply
        continue-on-error: true

      - name: Comment Apply
        uses: actions/github-script@v6
        if: github.event.pull_request.merged == true
        env:
          APPLY: '${{ steps.apply.outputs.stdout }}'
          ERROR: ${{ steps.apply.outputs.stderr }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { APPLY, ERROR } = process.env
            const output = `#### Job: \`${{ github.workflow }}-${{ matrix.directory }}\`
            #### Terraform Format and Style ðŸ–Œ\`{{ steps.fmt.outcome }}\`
            #### Terraform Validation ðŸ¤–\`${{ steps.validate.outcome }}\`
            #### Terraform Lint \`${{ steps.tflint.outcome }}\`
            #### Terraform Apply ðŸ“–\`${{ steps.apply.outcome }}\`

            <details><summary>Show Apply</summary>

            \`\`\`hcl\n
            ${APPLY}
            \`\`\`

            </details>

            <details><summary>Show Errors</summary>

            \`\`\`hcl\n
            ${ERROR}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
            })

      # Highlights whenever a step fails because of continues on error.
      - name: Terraform Status
        if: ${{ failure() }}
        run: exit 1
