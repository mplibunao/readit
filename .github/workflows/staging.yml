name: staging

defaults:
  run:
    shell: bash

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  REGISTRY: asia-southeast1-docker.pkg.dev
  IMAGE_TAG_PREFIX: asia-southeast1-docker.pkg.dev/prj-c-readit-shared-infra-de69/container-repo-c-readit
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_BUILDKIT: 1
  APP_NAME: readit
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: mplibunao
  TURBO_REMOTE_ONLY: true
  VERCEL_ORG_ID: Xl7cG8FFUpa6g9KEqzLz91Km
  VERCEL_PROJECT_ID: prj_fx8rZgSzOkAPc6w0T66BddkkpJcM
  GCP_REGION: asia-southeast1
  GCP_PROJECT_ID: prj-s-readit-a2b9

  API_HOST: 127.0.0.1
  DATABASE_URL: postgres://readit:postgres@localhost:5432/readit
  FRONTEND_URL: http://localhost:3000
  IS_PROD: false
  NODE_ENV: test
  PORT: 4000
  REDIS_URL: redis://:redis_password@localhost:6379
  TRPC_ENDPOINT: /trpc
  EDGE_CONFIG: ''
  VERCEL_ENV: development
  API_URL: http://localhost:4000/api
  NEXT_PUBLIC_API_URL: http://localhost:4000/api
  NEXT_TELEMETRY_DISABLED: 1
  REVALIDATE_TOKEN: de18b03be86939d7484c42856706c240bfc6c5ecb5fe837ee697867c2488e697

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: 'package.json'

      - uses: pnpm/action-setup@v2.2.4
        name: Install pnpm
        id: pnpm-install
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >>$GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run CI
        run: |
          docker-compose up -d
          pnpm ci

  migration:
    name: migration
    needs: [ci]
    runs-on: ubuntu-latest
    permissions:
      # wif
      contents: read
      id-token: write
    strategy:
      matrix:
        service: [pg-manager]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Auth GCP Service Account
        id: auth-gcp
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT }}'
          token_format: 'access_token'
          access_token_lifetime: '600s'

      - name: Build image tag
        run: |
          echo "IMAGE_TAG=${{ env.IMAGE_TAG_PREFIX }}/${{ env.APP_NAME }}-${{ matrix.service }}" >> $GITHUB_ENV
          echo "DOCKERFILE=./apps/${{ matrix.service }}/Dockerfile" >> $GITHUB_ENV

      - name: Setup buildx
        uses: docker/setup-buildx-action@v2
        id: buildx

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.auth-gcp.outputs.access_token }}

      # We use a static staging/production tag so we don't have to update the job everytime we push a new one (we run update anyway but atleast we don't have to keep track of versions)
      # You only need the latest version of migration image anyway then you can up/down as you wish
      # This meta doesn't explicitly put `latest` so creating a job fails. We don't use latest since we want to differentiate between staging and prod (since we don't keep track of versions)
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            name=${{ env.IMAGE_TAG }},enable=true
          tags: |
            type=raw,value=staging
          flavor: |
            latest=auto

      - name: Build and push
        id: push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          builder: ${{ steps.buildx.outputs.name }}
          target: production
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      # Update is needed just to make sure we're using the default cmd in case of someone modifying to rollback
      - name: Update and execute migration job
        run: |-
          ./scripts/migrate_ci.sh ${{ env.GCP_PROJECT_ID }} ${{ env.GCP_REGION }} "${{ env.APP_NAME }}-${{ matrix.service }}"

  docker_staging_cloudrun_cd:
    name: docker_staging_cloudrun_cd
    needs: [ci, migration]
    runs-on: ubuntu-latest
    permissions:
      # wif
      contents: read
      id-token: write
    strategy:
      matrix:
        service: [api]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Auth GCP Service Account
        id: auth-gcp
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT }}'
          token_format: 'access_token'
          access_token_lifetime: '600s'

      - name: Build image tag
        run: |
          echo "IMAGE_TAG=${{ env.IMAGE_TAG_PREFIX }}/${{ env.APP_NAME }}-${{ matrix.service }}" >> $GITHUB_ENV
          echo "DOCKERFILE=./apps/${{ matrix.service }}/Dockerfile" >> $GITHUB_ENV

      - name: Setup buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
        #with:
        #buildkitd-flags: --debug

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.auth-gcp.outputs.access_token }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            name=${{ env.IMAGE_TAG }},enable=true
          tags: |
            type=ref,event=pr
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

          flavor: |
            latest=auto
            prefix=
            suffix=

      - name: Build and push
        id: push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          builder: ${{ steps.buildx.outputs.name }}
          target: production
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          image: '${{ env.IMAGE_TAG }}@${{ steps.push.outputs.digest }}'
          service: '${{ env.APP_NAME }}-${{ matrix.service }}'
          region: ${{ env.GCP_REGION }}
          project_id: ${{ env.GCP_PROJECT_ID }}

  vercel_staging:
    needs: [ci, docker_staging_cloudrun_cd]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - uses: pnpm/action-setup@v2.2.4
        name: Install pnpm
        id: pnpm-install
        with:
          run_install: false

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
